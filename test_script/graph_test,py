import numpy as np
from collections import defaultdict
    
import heapq

def main():
    print("start")
    grid = np.zeros([10, 10])

    # Define some active cells
    grid[1, 1] = 1
    grid[1, 2] = 1
    grid[1, 3] = 1
    grid[3, 3] = 1
    grid[:-1,5] = 1
    
    # Start
    start = (0,0)
    
    # Slut
    end = (3,7)

    (525, 325)
    (775, 425)
    
    print(grid)

    grid_dict = grid_to_dict(grid, 1)

    for entre in grid_dict:
        print(f"Coord: {entre} has data: {grid_dict[entre]}")

    path = find_path(grid_dict, start_coord=(0,0), end_coord=(7,3))

    vis = True
    
    if vis and path != None:
        for coord in path:
            x,y = coord
            
            grid[y,x] = 2
            
        print(grid)
            
            

def distance(current_coord: tuple[int, int], goal_coord: tuple[int, int]) -> float:
    x1, y1 = current_coord
    x2, y2 = goal_coord
    return np.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

def find_path(grid_dict: dict[tuple, list], start_coord: tuple[int, int], end_coord: tuple[int, int]):
    g_cost = {start_coord: 0}  # Actual cost from start
    came_from = {}  # To reconstruct path
    open_list = []
    heapq.heappush(open_list, (0, start_coord))  # (f, coord)
    closed_list = set()  # Fully explored nodes

    while open_list:
        _, pre_coord = heapq.heappop(open_list)  # Get node with lowest f

        if pre_coord == end_coord:  # If goal is reached, reconstruct path
            print(f"Found end")
            path = []
            while pre_coord in came_from:
                path.append(pre_coord)
                pre_coord = came_from[pre_coord]
            path.append(start_coord)
            return path[::-1]  # Return reversed path

        closed_list.add(pre_coord)

        # Explore neighbors        
        for suc_coord, suc_cost in grid_dict[pre_coord]:
            if suc_coord in closed_list:
                continue  # Skip already processed nodes

            new_g = g_cost[pre_coord] + suc_cost  # Compute new cost
            new_f = new_g + distance(suc_coord, end_coord)

            # Only update if it's a better path
            if suc_coord not in g_cost or new_g < g_cost[suc_coord]:
                g_cost[suc_coord] = new_g
                came_from[suc_coord] = pre_coord
                print(f"Pushing {suc_coord} Cost: {new_f}")
                heapq.heappush(open_list, (new_f, suc_coord))

    return None  # No path found
      
def grid_to_dict(grid: np.ndarray, node_spacing: int) -> dict:
        
    y_size, x_size = grid.shape

    coord_list = []

    # Define relative neighbor positions
    k = node_spacing
    neighbors = [(-k,-k), (0,-k), (k,-k), (-k,0), (k,0), (-k,k), (0,k), (k,k)]

    coord_dict = defaultdict(list)

    for y in range(y_size):
        for x in range(x_size):
            coord_list.append((x, y))  # Store the coordinate
            
            temp_coord = []
            
            for dx, dy in neighbors:
                nx, ny = x + dx, y + dy  # Compute neighbor coordinates
                
                # Ensure the neighbor is within bounds
                if 0 <= nx < x_size and 0 <= ny < y_size and grid[ny, nx] == 0:
                    
                    # Check for diagonal neighbors' validity
                    if dx == -1 and dy == -1:  # Top-left
                        coord =((nx,ny), 1.4)
                        if grid[y, x-1] == 1 or grid[y-1, x] == 1:
                            continue  
                    elif dx == 1 and dy == -1:  # Top-right
                        coord =((nx,ny), 1.4)
                        if grid[y, x+1] == 1 or grid[y-1, x] == 1:
                            continue
                    elif dx == -1 and dy == 1:  # Bottom-left
                        coord =((nx,ny), 1.4)
                        if grid[y, x-1] == 1 or grid[y+1, x] == 1:
                            continue
                    elif dx == 1 and dy == 1:  # Bottom-right
                        coord =((nx,ny), 1.4)
                        if grid[y, x+1] == 1 or grid[y+1, x] == 1:
                            continue
                    else:
                        coord =((nx,ny), 1)
                        
                    temp_coord.append(coord)  # Append valid neighbor
            
            coord_dict[(x,y)] = (temp_coord)
            
            #print(f"({x}, {y}) -> Neighbors: {temp_coord}")

    return coord_dict
        
def grid_to_dict_GPT(grid: np.ndarray) -> dict:
    y_size, x_size = grid.shape
    coord_dict = defaultdict(list)

    # Define relative neighbor positions
    neighbors = [(-1, -1), (0, -1), (1, -1), (-1, 0), (1, 0), (-1, 1), (0, 1), (1, 1)]

    for y in range(y_size):
        for x in range(x_size):
            temp_coord = []
            
            for dx, dy in neighbors:
                nx, ny = x + dx, y + dy  # Compute neighbor coordinates

                # Ensure the neighbor is within bounds
                if 0 <= nx < x_size and 0 <= ny < y_size and grid[ny, nx] == 0:
                    
                    # Check for diagonal neighbors' validity
                    if (dx, dy) in [(-1, -1), (1, -1), (-1, 1), (1, 1)]:
                        # Check for blocked diagonals
                        if grid[y, x-1] == 1 or grid[y-1, x] == 1 if dy == -1 else grid[y+1, x] == 1 or grid[y, x+1] == 1:
                            continue  # Skip invalid diagonal moves
                        temp_coord.append(((nx, ny), 1.4))
                    else:
                        temp_coord.append(((nx, ny), 1))  # Add regular move (horizontal/vertical)

            coord_dict[(x, y)] = temp_coord

    return coord_dict


if __name__ == "__main__":
    
    main()
    
